/*
 * Square
 *
 * Use Square APIs to manage and run business including payment, customer, product, inventory, and employee management.
 *
 * API version: 2.0
 * Contact: developers@squareup.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

// Describes a request to refund a payment using [RefundPayment]($e/Refunds/RefundPayment).
type RefundPaymentRequest struct {
	//  A unique string that identifies this `RefundPayment` request. The key can be any valid string but must be unique for every `RefundPayment` request.  Keys are limited to a max of 45 characters - however, the number of allowed characters might be less than 45, if multi-byte characters are used.  For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
	IdempotencyKey string `json:"idempotency_key"`
	AmountMoney *Money `json:"amount_money"`
	AppFeeMoney *Money `json:"app_fee_money,omitempty"`
	// The unique ID of the payment being refunded. Required when unlinked=false, otherwise must not be set.
	PaymentId string `json:"payment_id,omitempty"`
	// The ID indicating where funds will be refunded to. Required for unlinked refunds. For more information, see [Process an Unlinked Refund](https://developer.squareup.com/docs/refunds-api/unlinked-refunds).  For refunds linked to Square payments, `destination_id` is usually omitted; in this case, funds will be returned to the original payment source. The field may be specified in order to request a cross-method refund to a gift card. For more information, see [Cross-method refunds to gift cards](https://developer.squareup.com/docs/payments-api/refund-payments#cross-method-refunds-to-gift-cards).
	DestinationId string `json:"destination_id,omitempty"`
	// Indicates that the refund is not linked to a Square payment. If set to true, `destination_id` and `location_id` must be supplied while `payment_id` must not be provided.
	Unlinked bool `json:"unlinked,omitempty"`
	// The location ID associated with the unlinked refund. Required for requests specifying `unlinked=true`. Otherwise, if included when `unlinked=false`, will throw an error.
	LocationId string `json:"location_id,omitempty"`
	// The [Customer](entity:Customer) ID of the customer associated with the refund. This is required if the `destination_id` refers to a card on file created using the Cards API. Only allowed when `unlinked=true`.
	CustomerId string `json:"customer_id,omitempty"`
	// A description of the reason for the refund.
	Reason string `json:"reason,omitempty"`
	//  Used for optimistic concurrency. This opaque token identifies the current `Payment` version that the caller expects. If the server has a different version of the Payment, the update fails and a response with a VERSION_MISMATCH error is returned. If the versions match, or the field is not provided, the refund proceeds as normal.
	PaymentVersionToken string `json:"payment_version_token,omitempty"`
	// An optional [TeamMember](entity:TeamMember) ID to associate with this refund.
	TeamMemberId string `json:"team_member_id,omitempty"`
	CashDetails *DestinationDetailsCashRefundDetails `json:"cash_details,omitempty"`
	ExternalDetails *DestinationDetailsExternalRefundDetails `json:"external_details,omitempty"`
}
